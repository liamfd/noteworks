{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"work",
				"work_group"
			],
			[
				"being",
				"being_tapped"
			],
			[
				"add",
				"addClass"
			],
			[
				"none",
				"none"
			],
			[
				"from",
				"from_remove_total"
			],
			[
				"insert",
				"insert_element"
			],
			[
				"before_create",
				"before_create_defaulter"
			],
			[
				"backgrou",
				"background-color"
			],
			[
				"categories",
				"categories"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"font",
				"font-path"
			],
			[
				"sans",
				"sans-font-stack"
			],
			[
				"data",
				"data-equilizer"
			],
			[
				"category",
				"category-button"
			],
			[
				"categ",
				"category_color"
			],
			[
				"ajax",
				"ajaxOptions"
			],
			[
				"aja",
				"ajaxOptions"
			],
			[
				"set_cate",
				"set_categories"
			],
			[
				"sub",
				"submitForm"
			],
			[
				"on",
				"onclick"
			],
			[
				"test_",
				"test_xhr"
			],
			[
				"test",
				"test_object"
			],
			[
				"toggle",
				"toggleSpinner"
			],
			[
				"submit",
				"submit_form"
			],
			[
				"placee",
				"place_holder"
			],
			[
				"place",
				"place_holder"
			],
			[
				"line",
				"line_content"
			],
			[
				"dest",
				"destroy"
			],
			[
				"child",
				"child_id"
			],
			[
				"object",
				"object_root"
			],
			[
				"parent",
				"parent_id"
			],
			[
				"links",
				"links"
			],
			[
				"do",
				"do"
			],
			[
				"rand",
				"rand_hex_color_value"
			],
			[
				"curr",
				"currLine"
			],
			[
				"check",
				"checkLineChanged"
			],
			[
				"change",
				"changes_made"
			],
			[
				"mod_lin",
				"mod_line_text"
			],
			[
				"mod_line",
				"mod_line_nums"
			],
			[
				"num",
				"num_lines_modified"
			],
			[
				"num_lines",
				"num_lines_modified"
			],
			[
				"change_line",
				"change_line_text"
			],
			[
				"nume",
				"num_lines_added"
			],
			[
				"mod",
				"mod"
			],
			[
				"add_li",
				"add_line_text"
			],
			[
				"num_",
				"num_lines_modified"
			],
			[
				"prev",
				"prev_line"
			],
			[
				"end",
				"end_line"
			],
			[
				"start",
				"start_line"
			],
			[
				"get",
				"getCurrentLine"
			],
			[
				"src",
				"srcElement"
			],
			[
				"destro",
				"destroy_all"
			],
			[
				"chi",
				"child_node"
			],
			[
				"link",
				"link_coll"
			],
			[
				"lin",
				"line_content"
			],
			[
				"build_",
				"build_link_collection"
			],
			[
				"ordering",
				"ordering"
			],
			[
				"before_",
				"before_destroy"
			],
			[
				"find",
				"find_by"
			],
			[
				"new_",
				"new_ordering"
			],
			[
				"mark",
				"markup_text"
			],
			[
				"type",
				"type_char"
			],
			[
				"obj",
				"obj_place"
			],
			[
				"pare",
				"parent_id"
			],
			[
				"mod_edge",
				"mod_edge"
			],
			[
				"from_",
				"from_insert"
			],
			[
				"delee",
				"deleted_element_hash"
			],
			[
				"cate",
				"category_name"
			],
			[
				"uni",
				"uniqify_arrays_in_hash"
			],
			[
				"remo",
				"remove_nodes"
			],
			[
				"add_",
				"add_node"
			],
			[
				"new",
				"new_element_hash"
			],
			[
				"to",
				"to_modify"
			],
			[
				"merge",
				"merge_two_hashes"
			],
			[
				"to_",
				"to_change"
			],
			[
				"remove",
				"remove_node"
			],
			[
				"modify",
				"modify_nodes"
			],
			[
				"modi",
				"modify_nodes"
			],
			[
				"eleme",
				"element_array_key"
			],
			[
				"element",
				"element_array"
			],
			[
				"L",
				"LinkCollection"
			],
			[
				"Link",
				"LinkCollection"
			],
			[
				"index",
				"index"
			],
			[
				"delete",
				"delete_all"
			],
			[
				"paren",
				"parent_node"
			],
			[
				"delet",
				"delete_element"
			],
			[
				"lines",
				"lines_content"
			],
			[
				"owner",
				"owner_node"
			],
			[
				"old",
				"old_parent_edge"
			],
			[
				"ol",
				"old_parent_edge"
			],
			[
				"first",
				"first"
			],
			[
				"in",
				"in_element"
			],
			[
				"jut",
				"just_added"
			],
			[
				"just",
				"just_added"
			],
			[
				"format",
				"formatHashForAJAX"
			],
			[
				"forma",
				"formatHashForAJAX"
			],
			[
				"deleted",
				"deleted_element_hash"
			],
			[
				"combine",
				"combine_notes"
			],
			[
				"changes",
				"changes_made"
			],
			[
				"prev_parent",
				"prev_parent_id"
			],
			[
				"remv",
				"remove_nodes"
			],
			[
				"remove_node",
				"remove_node"
			],
			[
				"node",
				"node"
			],
			[
				"rem",
				"rem_node"
			],
			[
				"nodes",
				"nodes"
			],
			[
				"pos_",
				"pos_x"
			],
			[
				"pos",
				"pos_y"
			],
			[
				"target",
				"target"
			],
			[
				"mod_",
				"mod_edges"
			],
			[
				"cy",
				"cy"
			],
			[
				"style",
				"style"
			],
			[
				"re",
				"relations"
			],
			[
				"out",
				"out_JSON"
			],
			[
				"toAdd",
				"toAddEdges"
			],
			[
				"rela",
				"parent_relationships"
			],
			[
				"id",
				"id"
			],
			[
				"combined",
				"combined_notes"
			],
			[
				"cob",
				"combined_notes"
			],
			[
				"updat",
				"update_attribute"
			],
			[
				"markup",
				"markup_lines"
			],
			[
				"Node",
				"Node"
			],
			[
				"combin",
				"combine_notes"
			],
			[
				"title",
				"title"
			],
			[
				"wih",
				"withinBrackets"
			],
			[
				"match",
				"matched"
			],
			[
				"currLine",
				"currLine"
			],
			[
				"node_id",
				"node_id"
			],
			[
				"is",
				"is_a"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/assets/stylesheets/foundation_and_overrides.css.scss",
			"settings":
			{
				"buffer_size": 42196,
				"line_ending": "Unix"
			}
		},
		{
			"contents": ".row.main\n	.row#profile_header\n		%h1 Profile: \n		%h2.subheader #{current_user.email}\n	.row#work_group_list\n		=render 'work_groups/work_group_list'\n				\n#groupModal{class: \"reveal-modal\", data:{:reveal=> true}}\n#myModal{class: \"reveal-modal\", data:{:reveal=> true}}",
			"file": "app/views/users/show.html.haml",
			"file_size": 1015,
			"file_write_time": 1396989160000000,
			"settings":
			{
				"buffer_size": 264,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config/initializers/devise.rb",
			"settings":
			{
				"buffer_size": 12448,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/views/users/sessions/new.html.haml",
			"settings":
			{
				"buffer_size": 401,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/views/users/shared/_links.haml",
			"settings":
			{
				"buffer_size": 1213,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/views/works/_work_list.html.haml",
			"settings":
			{
				"buffer_size": 1446,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/assets/stylesheets/works.css.scss",
			"settings":
			{
				"buffer_size": 2113,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/assets/stylesheets/users.css.scss",
			"settings":
			{
				"buffer_size": 335,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Place all the behaviors and hooks related to the matching controller here.\n// All this logic will automatically be available in application.js.\n// You can use CoffeeScript in this file: http://coffeescript.org/\nvar i = 0;\nvar lineText = \"\";\nvar prevLine = 0;\nvar num_lines = 0;\nvar test_data;\nvar changes_made;\nvar num_lines_selected = 1; //default is one, when no selection count the cursor\n\n$( document ).ready(function() {\n  num_lines = getNumLines();\n  changes_made = false;\n  test_data = {};\n\n//  $ ('#work_markup').get(0).onkeypress= pressFunction;\n  if ($(\"#work_markup\").length !== 0){\n    $ ('#work_markup').get(0).onkeyup= upFunction;\n    $ ('#work_markup').get(0).onclick= clickFunction;\n    $ ('#work_markup').get(0).onselect= selectFunction;\n  }\n  $('#category_list').bind(\"ajax:success\", function(evt, data, status, xhr){\n//  alert('hello');\n  });\n\n  $(\"#toggle\").click(function(){\n    $(\"#panel\").slideToggle(\"slow\");\n  });\n\n  $(\"#guide-button\").click(function(){\n    $(document).foundation('joyride', 'start');\n  });\n  //var ele = gon.elements;\n  //ele = JSON.stringify(ele);\n  //$( \".test\" ).text(ele);\n});\n\nvar test_data;\nvar test_xhr;\nvar test_obj;\nvar test_ajaxOptions;\nvar test_error;\n\nfunction submitForm(){\n  $(this).parents(\"form\").submit();\n  console.log($(this));\n}\n\nfunction toggleSpinner(){\n  $(\"#spinner\").toggle();\n}\n\n//sets the stuff for works/:id/categories\n$(function() {\n  $('#myModal').bind('opened', function() {\n    //this could also go in a ajaxComplete global call\n    console.log(\"my modal opening\");\n    //console.log(\"myModal opened\");\n    if ( $(\".edit_form\").length !== 0 ){\n      $(\".edit_form\").find('#category_name').get(0).onblur= submitForm;\n      $(\".edit_form\").find('#category_color').get(0).onblur= submitForm;\n    }\n    $(\"#spinner\").hide();\n\n    $.minicolors.defaults = $.extend($.minicolors.defaults, {\n      changeDelay: 200,\n      defaultValue: \"#c0c0c0\",\n      position: \"bottom left\"\n    });\n\n    $('#category_color').minicolors();\n\n    $(\"form\").bind(\"ajax:beforeSend\", function(){\n      $(\"#spinner\").show();\n      $(\"#response\").hide();\n    });\n    $(\"form\").bind(\"ajax:success\", function(evt, data, status, xhr){\n      $(\"#response\").html(\"Saved!\").show().fadeOut(\"slow\");\n      test_data = data;\n    });\n    $(\"form\").bind(\"ajax:complete\", function(){\n      $(\"#spinner\").hide();\n    });\n    $(\"form\").bind(\"ajax:error\", function(xhr, ajaxOptions, thrownError){\n      //find a way to get the actual error being returned by the rails controller\n      $(\"#response\").html(\"Error: Repeated name.\").show().fadeOut(\"slow\");\n      $(\"#spinner\").hide();\n      test_xhr = xhr;\n      test_ajaxOptions = ajaxOptions;\n      test_error = thrownError;\n    });\n    $(document).foundation();\n  });\n});\n\n/**\n* Function called on keyup. This function now uses the changes in length and the selections made to determine whether changes\n* have been made, and calls the appropriate functions. An improvement over the original, which used specific buttons presses\n* to determine changes.\n*/\nfunction upFunction(e){\n  var code = e.code || e.which;\n  //alert(code);\n  var el = this;\n  if (el == undefined)\n    return;\n\n  var curr_num_lines = getNumLines();\n  var num_lines_changed = curr_num_lines - num_lines;\n\n  var text;\n  currLine = getCurrentLine(el);\n  curr_line = currLine;\n  prev_line = prevLine;\n  text = getLineText(prevLine);\n\n  if ((code < 37) || (code > 40)){ //if it's not an arrow key, assume something has been changed\n    changes_made = true;\n  }\n\n // console.log(\"num_lines_changed:\" + num_lines_changed);\n // console.log(\"num_lines_selected:\" + num_lines_selected);\n // console.log(\"changes made?\" + changes_made);\n  if (changes_made){\n  //  console.log(\"line changed?\" + checkLineChanged(currLine));\n    if (num_lines_changed !== 0 || num_lines_selected !== 1){ //if the current number of lines has changed, or we selected some\n      //if adding or only modifying\n      if (num_lines_changed > 0){ // if some have been added\n        num_lines_changed = curr_line - prev_line+1; //only works b/c you always add down, use the +1 to account for last line\n        num_lines_modified = num_lines_selected;\n\n      //  console.log(\"modified\"+num_lines_modified);\n\n        total_changes = getChanges(num_lines_changed, num_lines_modified);\n        console.log(\"added_lines\" + total_changes.change_line_nums);\n        console.log(\"mod_lines\" + total_changes.mod_line_nums);\n        modElement(total_changes.mod_line_nums, total_changes.mod_line_text);\n        addElement(total_changes.change_line_nums, total_changes.change_line_text);\n      }\n\n      //if deleting\n      else if (num_lines_changed < 0){ //if some have been deleted\n        num_lines_deleted = Math.abs(num_lines_changed);\n        // if deleting one line, you always modify the first and delete the second. otherwise, modify the first, deal with rest\n        num_lines_modified = Math.max(1, num_lines_selected-num_lines_deleted); //modifying all selected lines not being deleted\n        num_lines_changed = num_lines_deleted + num_lines_modified;// + Math.abs(curr_line-prev_line);\n        \n      //  console.log(\"deleted\" + num_lines_deleted);\n      //  console.log(\"modified\"+ num_lines_modified);\n      //  console.log(\"changed\" + num_lines_changed);\n      \n        total_changes = getChanges(num_lines_changed, num_lines_modified);\n        console.log(\"deleted_lines\" + total_changes.change_line_nums);\n        console.log(\"mod_lines\" + total_changes.mod_line_nums);\n        \n        modElement(total_changes.mod_line_nums, total_changes.mod_line_text);\n        delElement(total_changes.change_line_nums, total_changes.change_line_text);\n      }\n      else{\n        num_lines_changed = curr_line - prev_line+1; //use the +1 to account for last line\n        num_lines_modified = num_lines_selected;\n\n      //  console.log(\"modified\"+num_lines_modified);\n\n        total_changes = getChanges(num_lines_changed, num_lines_modified);\n        console.log(\"mod_lines\" + total_changes.mod_line_nums);\n        \n        modElement(total_changes.mod_line_nums, total_changes.mod_line_text);\n      }\n      changes_made = false;\n    }\n\n    else if (checkLineChanged(currLine)){ //otherwise, if he's just changed lines\n     // if (changes_made){ //if he's not just arrowing around\n      text = getLineText(prevLine);\n      console.log(\"updating element at \" + prev_line);\n      modElement(prevLine, text);\n    //    changes_made = false;\n    //  }\n      changes_made = false;\n    }\n  }\n  prevLine = currLine;\n  num_lines = curr_num_lines;\n  num_lines_selected = 1;\n\n  console.log(\"--------------\");\n\n  return;\n}\n\n//returns a collection of the changed lines, those modified and those added or deleted (\"changed\")\nfunction getChanges(change_length, mod_point){\n  mod_line_nums = [];\n  mod_line_text = [];\n  change_line_nums = [];\n  change_line_text = [];\n\n  var starting_ind = Math.min(prev_line, curr_line);\n\n  //runs from the prev_line up past curr_line to all ones being changed (added or deleted)\n  for (i=0; i < change_length; i++){\n    line_ind = starting_ind+i;\n  //  console.log(\"i:\" + i + \" line_ind:\" + line_ind);\n    if (i < mod_point){ //before the threshold where you start adding\n      mod_line_nums.push(line_ind);\n      mod_line_text.push(getLineText(line_ind));\n    //  console.log(\"mod\");\n    }\n    else{\n      change_line_nums.push(line_ind);\n      change_line_text.push(getLineText(line_ind));\n    //  console.log(\"change\");\n    }\n  }\n  return{\n    mod_line_nums: mod_line_nums,\n    mod_line_text: mod_line_text,\n    change_line_nums: change_line_nums,\n    change_line_text: change_line_text\n  };\n}\n\n//function called on click. Gets the current line and sends it to checkChanged\nfunction clickFunction(e){\n  var currLine = getCurrentLine(this);\n//  checkLineChanged(currLine);\n//  if (this == undefined)\n//    return;\n  num_lines_selected = 1; //returns to default, in case just clicking, if it is selected that's taken care of in subsequent onselect\n  prevLine = currLine;\n}\n\n//returns the number of lines being selected\nfunction selectFunction(e){\n\n  console.log(e);\n  var range = getInputSelection(e.srcElement);\n  console.log(\"Range: \" + range.start + \",\" + range.end);\n  var start_line = getLineNumber(range.start, e.srcElement);\n  var end_line = getLineNumber(range.end-1, e.srcElement); //end is inclusive, make it exclusive with -1\n\n  console.log(start_line +\"  \" + end_line);\n  num_lines_selected = Math.abs(end_line - start_line) + 1;\n  return (num_lines_selected); //returns the number of lines highlighted, +1 so counts the first line\n}\n\n\n//ajax call that takes in a line number and its text, and sends them to the modelements function in the works controller\nfunction modElement(line_num, text){\n  console.log(\"update\" + line_num + text);\n  $.ajax({\n    type:\"GET\",\n    url:\"mod_element\",\n    data: {line_number: line_num, line_content: text},\n    dataType:\"json\",\n    success: function(data){\n      modInGraph(data);\n    }\n  });\n}\n\n//ajax call that takes in a line number and its text, and sends them to the addelement function in the works controller\nfunction addElement(line_num, text){\n  console.log(\"add\");\n  $.ajax({\n    type:\"GET\",\n    url:\"add_element\",\n    data: {line_number: line_num, line_content: text},\n    dataType:\"json\",\n    success: function(data){\n      modInGraph(data);\n    }\n  });\n}\n\n//ajax call that takes in a line number and sends it to the delelement function in the works controller\nfunction delElement(line_num){\n  console.log(\"del\");\n  $.ajax({\n    type:\"GET\",\n    url:\"del_element\",\n    data: {line_number: line_num},\n    dataType:\"json\",\n    success: function(data){\n      modInGraph(data);\n    }\n  });\n}\n\n\n//function that runs if the ajax is successful, will eventually update the graph\nfunction modInGraph(data){\n  $(\"#test_box\").text(JSON.stringify(data));\n  \n  //console.log(\"data=\" + data);\n  test_data = data;\n  var pos_y; //these two will be random\n  var pos_x;\n  var edge_id_string;\n\n\n  //delete the edges\n  for (i = 0; i < data.remove_edges.length; i++){\n    rem_edge = data.remove_edges[i];\n    if ((rem_edge != null) && (rem_edge != undefined)){\n      edge_id_string = \"#\" + rem_edge.id;\n      cy.remove(edge_id_string);\n    }\n  }\n\n  //delete the edges bieng modified (WILL PROBABLY DROP THIS)\n  for (i = 0; i < data.modify_edges.length; i++){\n    mod_edge = data.modify_edges[i];\n    if ((mod_edge != null) && (mod_edge != undefined)){\n      edge_id_string = \"#\" + mod_edge.id;\n      cy.remove(edge_id_string);\n    }\n  }\n\n  //modify the mod notes. Saves position, removes, adds back in with new data\n  var mod_node;\n  for (i = 0, len = data.modify_nodes.length; i < len; ++i){\n    mod_node = data.modify_nodes[i];\n    if ((mod_node != null) && (mod_node != undefined)){\n      //save the position, so the replacement can be set at it\n      var mod_graph_node = cy.$(\"#\" + mod_node.id);\n      pos_x = mod_graph_node.position().x;\n      pos_y = mod_graph_node.position().y;\n    \n      cy.remove(mod_graph_node);\n      mod_node.id = mod_node.id.toString();\n      console.log(mod_node);\n      cy.add({\n        group: \"nodes\",\n        data: mod_node,\n        position:{ x: pos_x, y: pos_y}\n      }).addClass(\"starting\");\n    \n    }\n  }\n\n  pos_y = 50; //these two will be random\n  pos_x = 60;\n\n  //delete the nodes\n  var rem_node;\n  for (i = 0, len = data.remove_nodes.length; i < len; ++i){\n    rem_node = data.remove_nodes[i];\n    if ((rem_node != null) && (rem_node != undefined) && rem_node.id !== null){\n      //save the position, so the replacement can be set at it\n      var rem_graph_node = cy.$(\"#\" + rem_node.id);\n      //pos_x = rem_graph_node.position().x;\n      //pos_y = rem_graph_node.position().y;\n    \n      cy.remove(rem_graph_node);\n    }\n  }\n \n  //var add_node = data.add.node;\n  //add the edges\n  for (i = 0, len = data.add_nodes.length; i < len; ++i){\n    add_node = data.add_nodes[i];\n    if ((add_node != null) && (add_node != undefined)) {\n      //add the new node\n      add_node.id = add_node.id.toString();\n    //  data.add.node.id = data.add.node.id.toString(); //convert the id to a string\n      cy.add({\n        group: \"nodes\",\n        data: add_node,\n        position:{ x: pos_x, y: pos_y}\n      }).addClass(\"starting\");\n    }\n  }\n\n  //add the edges being modified (WILL PROBABLY DROP THIS AS WELL)\n  for (i = 0; i < data.modify_edges.length; i++){\n    mod_edge = data.modify_edges[i];\n    console.log(mod_edge);\n    if ((mod_edge != null) && (mod_edge != undefined)){\n      mod_edge.id = data.modify_edges[i].id.toString();\n      mod_edge.source = data.modify_edges[i].source.toString();\n      mod_edge.target = data.modify_edges[i].target.toString();\n      console.log(mod_edge);\n     \n      //maybe have this check instead that both nodes exist in the graph, otherwise you get an error\n       console.log(\"source:\" + mod_edge.source + \" target\" + mod_edge.target + \" id: \" + mod_edge.id)\n      if ( mod_edge.source !== \"\" && mod_edge.target !== \"\" && mod_edge.id !== \"\" ){ //ignore if edge goes nowhere\n        cy.add({\n          group: \"edges\",\n          data: mod_edge\n        });\n      }\n    }\n  }\n\n\n  //add the new edges, first converting their values to strings\n  for (i = 0; i < data.add_edges.length; i++){\n    add_edge = data.add_edges[i];\n    console.log(add_edge);\n    if ((add_edge != null) && (add_edge != undefined)){\n      add_edge.id = data.add_edges[i].id.toString();\n      add_edge.source = data.add_edges[i].source.toString();\n      add_edge.target = data.add_edges[i].target.toString();\n      console.log(add_edge);\n     \n      //maybe have this check instead that both nodes exist in the graph, otherwise you get an error\n      console.log(\"source:\" + add_edge.source + \" target\" + add_edge.target + \" id: \" + add_edge.id);\n      if ( add_edge.source !== \"\" && add_edge.target !== \"\" && add_edge.id !== \"\" ){ //ignore if edge goes nowhere\n        cy.add({\n          group: \"edges\",\n          data: add_edge\n        });\n      }\n    }\n  }\n\n}\n\n\n//gets the caret pos this is for text areas\n(function ($, undefined) {\n    $.fn.getCursorPosition = function() {\n        var el = $(this).get(0);\n        var pos = 0;\n        if('selectionStart' in el) {\n            pos = el.selectionStart;\n        } else if('selection' in document) {\n            el.focus();\n            var Sel = document.selection.createRange();\n            var SelLength = document.selection.createRange().text.length;\n            Sel.moveStart('character', -el.value.length);\n            pos = Sel.text.length - SelLength;\n        }\n        return pos;\n    };\n  })(jQuery);\n\n//using the text and the caret position, gets the line number\nfunction getCurrentLine(el){\n  //var caretPos = getCaretCharacterOffsetWithin(el);\n  var caret_pos = $(\"#work_markup\").getCursorPosition();\n  return getLineNumber(caret_pos, el);\n  /*if (caretPos == null)\n    return -1;\n  //console.log(caretPos);\n\n  var currLine = 0;\n  var text = \"\";\n  if (el != undefined){\n    text = el.value;\n  }\n  //var text = \"soup\"\n  for (var i = 0; i < caretPos; i++){\n    if (text[i] == \"\\n\"){\n      currLine++;\n    }\n  }\n  //if it's a newline...\n  //console.log(\"currLine: \" + currLine);\n  return currLine;*/\n}\n\n\nfunction getLineNumber(pos, el){\n  if (pos == null)\n    return -1;\n  //console.log(caretPos);\n\n  var curr_line = 0;\n  var text = \"\";\n  if (el != undefined){\n    text = el.value;\n  }\n\n  //go through, checking for a newline, adding one for each\n  for (var i = 0; i < pos; i++){\n    if (text[i] === \"\\n\"){\n      curr_line++;\n    //  console.log(\"newline!\");\n    }\n //   console.log(text[i]+\"|\");\n  }\n  console.log(\"|\" + text[i] + \"|\");\n  return curr_line;\n}\n\n//returns the text at the given line, by breaking it into an array of strings (one each line) returning the one at lineNum\nfunction getLineText(lineNum){\n  var lines = $(\"#work_markup\").val().split(/\\r\\n|\\r|\\n/);\n//  console.log(\"888\" + lines[lineNum]);\n  return lines[lineNum];\n\n}\n\n//figure out what you want this to do\nfunction checkLineChanged(currLine){\n  if (currLine != prevLine){\n    return true;\n  }\n  return false;\n}\n\n//returns the number of lines in work_markup's text, by splitting with a regexp and taking length\nfunction getNumLines(){\n  if ($(\"#work_markup\").length !== 0){\n    var num_lines = $(\"#work_markup\").val().split(/\\r\\n|\\r|\\n/).length;\n    return num_lines;\n  }\n  return 0;\n}\n\n/* CYTOSCAPE STUFF */\n$(loadCy = function(){\n  options = {\n    \n    layout: {\n      name: 'arbor',\n      liveUpdate: true, // whether to show the layout as it's running\n      ready: undefined, // callback on layoutready \n      stop: undefined, // callback on layoutstop\n      maxSimulationTime: 4000, // max length in ms to run the layout\n      fit: true, // reset viewport to fit defaualt simulationBounds\n      padding: [ 50, 50, 50, 50 ], // top, right, bottom, left\n      simulationBounds: undefined, // [x1, y1, x2, y2]; [0, 0, width, height] by defaualt\n      ungrabifyWhileSimulating: true, // so you can't drag nodes during layout\n\n      // forces used by arbor (use arbor defaualt on undefined)\n      repulsion: undefined,\n      stiffness: undefined,\n      friction: undefined,\n      gravity: true,\n      fps: undefined,\n      precision: undefined,\n\n      // static numbers or functions that dynamically return what these\n      // values should be for each element\n      nodeMass: undefined,\n      edgeLength: undefined,\n\n      stepSize: 1, // size of timestep in simulation\n\n      // function that returns true if the system is stable to indicate\n      // that the layout can be stopped\n      stableEnergy: function( energy ){\n          var e = energy;\n          return (e.max <= 0.5) || (e.mean <= 0.3);\n      }\n    },\n\n    showOverlay: false,\n    panningEnabled: true,\n    boxSelectionEnabled: false,\n    minZoom: 0.5,\n    maxZoom: 2,\n\n    style: cytoscape.stylesheet()\n      .selector('node')\n        .css({\n          'content': 'data(title)',\n          'font-family': 'helvetica',\n          'font-size': 14,\n          \n          'width': 'mapData(weight, 30, 80, 20, 50)',\n          'height': 'mapData(height, 0, 200, 10, 45)',\n          'background-color': \"#fff\",\n          'z-index' : 1\n        })\n    \n      .selector(':selected')\n        .css({\n          'background-color': '#fff',\n          'line-color': '#000',\n          'target-arrow-color': '#000',\n          'text-outline-color': '#000'\n        })\n      .selector('edge')\n        .css({\n          'width': 3,\n          'target-arrow-shape': 'none'\n        })\n      .selector('.starting')\n        .css({\n          'text-outline-width': 3,\n          'text-outline-color': 'data(color)',\n          'border-color':'data(color)',\n          'border-width':3,\n          'background-color': '#fff',\n          'text-valign': 'center',\n          'text-halign' : 'center',\n          'color': '#fff',\n          'font-size':\"16px\",\n          'height':\"30px\",\n         \n          //this needs to be there, otherwise it doesn't draw the notes correctly the first time.\n          'note-font-size': \"16px\",\n          'note-font-weight': \"bold\",\n          'note-text-outline-width': 0,\n          \n        })\n      .selector('.focused')\n       .css({\n          'width' : '300px',\n          'height' : 'auto',\n          'shape' : 'roundrectangle',\n          'border-width' : \"3px\",\n          'border-color' : \"data(color)\",\n          'background-color' : '#fff',\n          'background-opacity' : 1,\n          \"opacity\" : 1,\n          \"z-index\" : 5,\n\n          'content' : 'data(title)',\n          'text-outline-width': 3,\n          'text-outline-color': 'data(color)',\n          'color': '#fff',\n          'text-valign' : \"top\",\n          'font-size':\"18px\",\n\n          'notes': 'data(notes)',\n          'note-text-outline-width': 0,\n          'note-text-outline-color':\"#fff\",\n          'note-color': '#444',\n          'note-font-size': \"16px\",\n          'note-font-weight': \"bold\",\n        })\n      .selector('.less-focused')\n        .css({\n          'z-index' : 3,\n          'background-color':\"#dddddd\"\n        })\n\n      .selector('.faded')\n        .css({\n          'opacity': 0.9,\n          'text-opacity': 0.9,\n          'z-index': 1,\n       }),\n   \n    elements:gon.elements,\n\n    ready: function(){\n      window.cy = this;\n      cy.elements().unselectify();\n\n      //centers the node further from the middle when clicking edge\n      cy.on('tap', 'edge', function(e){\n        var edge = e.cyTarget;\n        var src = edge.source();\n        var targ = edge.target();\n\n        //center of canvas\n        var cont = $('#cy')[0];\n        //var cont = document.getElementById(cy);\n        var cent_x = (cont.offsetWidth)/2;\n        var cent_y = (cont.offsetHeight)/2;\n     \n        //x and y of the two nodes\n        var src_x = src.renderedPosition(\"x\");\n        var src_y = src.renderedPosition(\"y\");\n        var targ_x = targ.renderedPosition(\"x\");\n        var targ_y = targ.renderedPosition(\"y\");\n       \n        //distance function, sans sqrt\n        var src_dist = (cent_x - src_x) * (cent_x - src_x) + (cent_y - src_y) * (cent_y - src_y);\n        var targ_dist = (cent_x - targ_x) * (cent_x - targ_x) + (cent_y - targ_y) * (cent_y - targ_y);\n\n        //whichever node is further away, center it\n        if (src_dist >= targ_dist){\n          cy.center(src);\n        } else {\n          cy.center(targ);\n        }\n\n      });\n      \n      //bring focus to the element as they're clicked, prioritizing the most recent click\n      cy.on('tap', 'node', function(e){\n        var curr_node = e.cyTarget;\n        var prev_foci = cy.elements('node.focused');\n\n        prev_foci.not(curr_node).addClass('less-focused'); //middleground all focused nodes except current\n\n        if (curr_node.hasClass('less-focused')){ //if it's been middlegrounded, foreground\n          curr_node.removeClass('less-focused');\n        }\n        else { //otherwise, swap between foreground and background\n          curr_node.toggleClass('focused');\n        }\n      });\n\n      //resets the nodes when background is clicked\n      cy.on('tap', function(e){\n        if( e.cyTarget === cy ){\n          cy.elements().removeClass('focused');\n          cy.elements().removeClass('less-focused');\n        }\n      });\n\n      cy.on('load', function(e) {\n        cy.elements().addClass(\"starting\");\n      });\n\n    }\n  };\n  $('#cy').cytoscape(options);\n});\n\n\nfunction EDgetLineText(currLine){\n  var text = $('#editable').get(0).innerText;\n  //console.log(\"currLine: \" + currLine);\n  if (currLine != 0){\n    var lines = $(\"#editable > *\");\n    if (lines[currLine-1] != null)\n      return lines[currLine-1].innerText;\n    else //if the line number is not a real one\n      return \"\";\n  }\n\n  else{ //if it's line 0, there is no jquery object\n    //returns as soon as there's a newline. if it never hits one, just returns the entire thing\n    var i;\n    for (i = 0; i < text.length; i++){\n      if (text[i] == \"\\n\")\n        return text.substring(0, i);\n    }\n    return text;\n  }\n}\n\nfunction EDgetCurrentLine(el, caretPos){\n  //var caretPos = getCaretCharacterOffsetWithin(el);\n  if (caretPos == null){\n    alert(\"wat\");\n    return 0;\n  }\n  var currLine = 0;\n\n  var text = el.innerText;\n  var text_html = el.innerHTML;\n  var i;\n\n  for (i = 0; i <= caretPos; i++){\n    if (text[i] == \"\\n\"){\n      currLine++;\n      caretPos++;\n    }\n    else{\n    }\n  }\n\n  //for text input, fixes the issue with the extra newline at the end\n  if (currLine >= 0 && text[caretPos-1] == \"\\n\"){\n    currLine--;\n  }\n  //solves issue with end of line moving cursor via arrows\n  if (text[caretPos] == \"\\n\"){\n    currLine--;\n  }\n  //if it's a newline...\n  return currLine;\n\n}\n\n\nfunction EDpressFunction(e){\n  var code = e.keyCode || e.which;\n\n  var el = $(\"#editable\")[0];\n  var caretPos = getCaretCharacterOffsetWithin(el);\n\n  var currLine = getCurrentLine(el, caretPos);\n  \n  if (code == 13){\n    currLine++;\n  }\n\n  checkChangedLine(currLine);\n  //so, whenever I make changes to a line that's not a backspace, send its complete self to the parser, to do its best with\n    //on the parser side, I don't want to just endlessly create shit... don't change to new element unless ordered to?\n  //keep track of previous line number, so if backspace is hit, I can know whether or not a whole line is gone. \n}\n\nfunction EDupFunction(e){\n  code = e.code || e.which;\n  \n  //I believe these two are equivalent\n  //var el = $(\"#editable\")[0];\n  var el = this;\n  var caretPos = getCaretCharacterOffsetWithin(el);\n  var currLine = 0;\n\n  var sel = rangy.getSelection();\n  var cursorOffset = sel.focusOffset;\n  \n  //delete never changes the LINE\n  //if the key pressed wasn't an arrow or a del/backsp.\n  if ((code==8) || (code==46) || ((code >= 37) && (code <= 40))){\n    currLine = getCurrentLine(el, caretPos);\n\n    //if the line by line count is 0, it's the border case, just bump it up, don't count if at first line\n    if (cursorOffset == 0 && caretPos != 0){\n     currLine++;\n    }\n    checkChangedLine(currLine);\n  }\n  //else if (code == 13){\n  //  currLine = getCurrentLine(el, caretPos);\n  //  currLine++; //since it's an enter\n  //  checkChangedLine(currLine);\n  //}\n\n  return;\n}\n\nfunction EDclickFunction(e){\n  var caretPos = getCaretCharacterOffsetWithin(this);\n  var currLine = getCurrentLine(this, caretPos);\n\n  var sel = rangy.getSelection();\n  var cursorOffset = sel.focusOffset;\n\n  //if the line by line count is 0, it's the border case, just bump it up, don't count if at first line\n  if (cursorOffset == 0 && caretPos != 0){\n   currLine++;\n  }\n  checkChangedLine(currLine);\n}\n\n\n//GETTING THE CARET POSITION\nfunction getCaretCharacterOffsetWithin(element) {\n    var caretOffset = 0;\n    var doc = element.ownerDocument || element.document;\n    var win = doc.defaultView || doc.parentWindow;\n    var sel;\n    if (typeof win.getSelection != \"undefined\") {\n        var range = win.getSelection().getRangeAt(0);\n        var preCaretRange = range.cloneRange();\n        preCaretRange.selectNodeContents(element);\n        preCaretRange.setEnd(range.endContainer, range.endOffset);\n        caretOffset = preCaretRange.toString().length;\n    } else if ( (sel = doc.selection) && sel.type != \"Control\") {\n        var textRange = sel.createRange();\n        var preCaretTextRange = doc.body.createTextRange();\n        preCaretTextRange.moveToElementText(element);\n        preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\n        caretOffset = preCaretTextRange.text.length;\n    }\n    return caretOffset;\n}\n\n//GETTING THE SELECTION\nfunction getInputSelection(el) {\n    var start = 0, end = 0, normalizedValue, range,\n        textInputRange, len, endRange;\n\n    if (typeof el.selectionStart == \"number\" && typeof el.selectionEnd == \"number\") {\n        start = el.selectionStart;\n        end = el.selectionEnd;\n    } else {\n        range = document.selection.createRange();\n\n        if (range && range.parentElement() == el) {\n            len = el.value.length;\n            normalizedValue = el.value.replace(/\\r\\n/g, \"\\n\");\n\n            // Create a working TextRange that lives only in the input\n            textInputRange = el.createTextRange();\n            textInputRange.moveToBookmark(range.getBookmark());\n\n            // Check if the start and end of the selection are at the very end\n            // of the input, since moveStart/moveEnd doesn't return what we want\n            // in those cases\n            endRange = el.createTextRange();\n            endRange.collapse(false);\n\n            if (textInputRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                start = end = len;\n            } else {\n                start = -textInputRange.moveStart(\"character\", -len);\n                start += normalizedValue.slice(0, start).split(\"\\n\").length - 1;\n\n                if (textInputRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                    end = len;\n                } else {\n                    end = -textInputRange.moveEnd(\"character\", -len);\n                    end += normalizedValue.slice(0, end).split(\"\\n\").length - 1;\n                }\n            }\n        }\n    }\n\n    return {\n        start: start,\n        end: end\n    };\n}\n\n\n\n\n\n\n//$(#editable).keypress(function(){\n // alert(\"shoo\");\n//});\n\n//THIS IS THE FORMATTING I USED IN THE VIEW\n/* \n$('#cy').cytoscape({\n  layout: {\n    name: 'arbor',\n    liveUpdate: false, // whether to show the layout as it's running\n    ready: undefined, // callback on layoutready \n    stop: undefined, // callback on layoutstop\n    maxSimulationTime: 4000, // max length in ms to run the layout\n    fit: true, // reset viewport to fit defaualt simulationBounds\n    padding: [ 50, 50, 50, 50 ], // top, right, bottom, left\n    simulationBounds: undefined, // [x1, y1, x2, y2]; [0, 0, width, height] by defaualt\n    ungrabifyWhileSimulating: true, // so you can't drag nodes during layout\n\n    // forces used by arbor (use arbor defaualt on undefined)\n    repulsion: undefined,\n    stiffness: undefined,\n    friction: undefined,\n    gravity: true,\n    fps: undefined,\n    precision: undefined,\n\n    // static numbers or functions that dynamically return what these\n    // values should be for each element\n    nodeMass: undefined,\n    edgeLength: undefined,\n\n    stepSize: 1, // size of timestep in simulation\n\n    // function that returns true if the system is stable to indicate\n    // that the layout can be stopped\n    stableEnergy: function( energy ){\n        var e = energy;\n        return (e.max <= 0.5) || (e.mean <= 0.3);\n    }\n  },\n\n  style: cytoscape.stylesheet()\n    .selector('node')\n      .css({\n        'content': 'data(title)',\n        'text-valign': 'center',\n        'color': 'white',\n        'text-outline-width': 2,\n        'text-outline-color': '//888'\n      })\n    .selector('edge')\n      .css({\n        'target-arrow-shape': 'triangle'\n      })\n    .selector(':selected')\n      .css({\n        'background-color': 'black',\n        'line-color': 'black',\n        'target-arrow-color': 'black',\n        'source-arrow-color': 'black'\n\n      })\n\n    .selector('.faded')\n      .css({\n        'opacity': 0.25,\n        'text-opacity': 0\n      })\n\n    .selector('.largeNode')\n      .css({\n        'width' : '100px',\n        'height' : '100px'\n      }),\n\n  elements: {\n    nodes: [\n      { data: { id: 'j', title: 'Jerry' } },\n      { data: { id: 'e', title: 'Elaine' } },\n      { data: { id: 'k', title: 'Kramer' } },\n      { data: { id: 'g', title: 'George' } }\n    ],\n    edges: [\n      { data: { source: 'j', target: 'e' } },\n      { data: { source: 'j', target: 'k' } },\n      { data: { source: 'j', target: 'g' } },\n      { data: { source: 'e', target: 'j' } },\n      { data: { source: 'e', target: 'k' } },\n      { data: { source: 'k', target: 'j' } },\n      { data: { source: 'k', target: 'e' } },\n      { data: { source: 'k', target: 'g' } },\n      { data: { source: 'g', target: 'j' } }\n    ]\n  },\n  \n    ready: function(){\n      window.cy = this;\n      \n      cy.elements().unselectify();\n      \n      cy.on('tap', 'node', function(e){\n        var node = e.cyTarget;\n        var neighborhood = node.neighborhood().add(node);\n        \n        cy.nodes().addClass('faded');\n        cy.nodes().removeClass('faded');\n        node.toggleClass('largeNode');\n      });\n      \n      cy.on('tap', function(e){\n        if( e.cyTarget === cy ){\n          cy.nodes().removeClass('faded');\n          cy.nodes().removeClass('largeNode');\n        }\n      });\n\n  }\n\n}); */\n\n\n\n\n\n\n",
			"file": "app/assets/javascripts/works.js",
			"file_size": 31811,
			"file_write_time": 1397064052000000,
			"settings":
			{
				"buffer_size": 31381,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/views/work_groups/_work_group_list.html.haml",
			"settings":
			{
				"buffer_size": 1121,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"About"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"package control",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 530.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/liam/projs/noteworks/app/views/users/sessions/new.html.haml",
		"/home/liam/projs/noteworks/app/views/users/unlocks/new.html.erb",
		"/home/liam/projs/noteworks/app/views/users/registrations/edit.html.erb",
		"/home/liam/projs/noteworks/app/views/users/passwords/new.html.erb",
		"/home/liam/projs/noteworks/app/views/users/registrations/new.html.haml",
		"/home/liam/projs/noteworks/app/views/users/confirmations/new.html.haml",
		"/home/liam/projs/noteworks/app/views/users/passwords/edit.html.erb",
		"/home/liam/projs/noteworks/app/views/users/shared/_links.haml",
		"/home/liam/projs/noteworks/app/views/users/shared/_links.erb",
		"/home/liam/projs/noteworks/app/views/users/confirmations/new.html.erb",
		"/home/liam/projs/noteworks/app/views/users/registrations/new.html.erb",
		"/home/liam/projs/noteworks/app/views/users/sessions/new.html.erb",
		"/home/liam/projs/noteworks/app/views/work_groups/_form.html.haml",
		"/home/liam/projs/noteworks/app/views/works/_form.html.haml",
		"/home/liam/projs/noteworks/app/views/categories/_form.html.haml",
		"/home/liam/projs/noteworks/app/assets/stylesheets/categories.css.scss",
		"/home/liam/projs/noteworks/app/assets/stylesheets/application.scss",
		"/home/liam/projs/noteworks/app/assets/stylesheets/works.css.scss",
		"/home/liam/projs/noteworks/app/views/works/_work_list.html.haml",
		"/home/liam/projs/noteworks/app/assets/stylesheets/colors.css.scss",
		"/home/liam/projs/noteworks/app/assets/stylesheets/home.css.scss",
		"/home/liam/projs/noteworks/app/views/home/index.html.haml",
		"/home/liam/projs/noteworks/app/views/shared/_nav.html.haml",
		"/home/liam/projs/noteworks/app/views/works/takenotes.html.haml",
		"/home/liam/projs/noteworks/app/views/works/_terminal.html.haml",
		"/home/liam/projs/noteworks/app/views/users/show.html.haml",
		"/home/liam/projs/noteworks/app/assets/stylesheets/users.css.scss",
		"/home/liam/projs/noteworks/app/views/work_groups/_work_group_list.html.haml",
		"/home/liam/projs/noteworks/app/views/works/category_list.html.haml",
		"/home/liam/projs/noteworks/app/models/key.rb",
		"/home/liam/projs/noteworks/app/assets/javascripts/works.js",
		"/home/liam/projs/noteworks/app/models/work.rb",
		"/home/liam/projs/noteworks/app/models/link_collection.rb",
		"/home/liam/projs/noteworks/app/controllers/categories_controller.rb",
		"/home/liam/projs/noteworks/config/routes.rb",
		"/home/liam/projs/noteworks/app/views/works/update.js.erb",
		"/home/liam/projs/noteworks/app/views/works/create.js.erb",
		"/home/liam/projs/noteworks/app/controllers/work_groups_controller.rb",
		"/home/liam/projs/noteworks/app/controllers/works_controller.rb",
		"/home/liam/projs/noteworks/app/views/works/_privacy_button_content.html.haml",
		"/home/liam/projs/noteworks/app/views/works/toggle_privacy.js.erb",
		"/home/liam/projs/noteworks/app/views/works/toggle_privacy.js.haml",
		"/home/liam/projs/noteworks/app/views/works/_privacy_button_content.html.erb",
		"/home/liam/projs/noteworks/app/views/works/_privacy_button.html.haml",
		"/home/liam/projs/noteworks/db/migrate/20140408215608_change_works_public_column_name.rb",
		"/home/liam/projs/noteworks/app/controllers/users_controller.rb",
		"/home/liam/projs/noteworks/app/assets/javascripts/users.js",
		"/home/liam/projs/noteworks/app/assets/stylesheets/foundation_and_overrides.css.scss",
		"/home/liam/projs/noteworks/app/assets/javascripts/nodes.js.coffee",
		"/home/liam/projs/noteworks/app/views/work_groups/destroy.js.erb",
		"/home/liam/projs/noteworks/app/views/work_groups/update.js.erb",
		"/home/liam/projs/noteworks/app/views/work_groups/create.js.erb",
		"/home/liam/projs/noteworks/app/assets/javascripts/categories.js",
		"/home/liam/projs/noteworks/app/assets/javascripts/home.js",
		"/home/liam/projs/noteworks/app/views/categories/_category_list.html.haml",
		"/home/liam/projs/noteworks/app/assets/stylesheets/fonts.scss",
		"/home/liam/projs/noteworks/app/assets/javascripts/application.js",
		"/home/liam/projs/noteworks/app/views/works/destroy.js.erb",
		"/home/liam/projs/noteworks/app/views/works/new.html.haml",
		"/home/liam/projs/noteworks/app/views/work_groups/edit.html.haml",
		"/home/liam/projs/noteworks/app/views/works/edit.html.haml",
		"/home/liam/projs/noteworks/vendor/assets/javascripts/cytoscape.js-2.0.4/cytoscape-2-1-wrapping-fix.js",
		"/home/liam/projs/noteworks/vendor/assets/javascripts/cytoscape.js-2.0.4/cytoscape-2-1-wrapping.js",
		"/home/liam/projs/noteworks/app/assets/javascripts/mod_cytoscape.js",
		"/home/liam/projs/noteworks/app/models/node.rb",
		"/home/liam/projs/noteworks/app/models/category.rb",
		"/home/liam/projs/noteworks/app/views/works/show.json.rabl",
		"/home/liam/projs/noteworks/app/assets/stylesheets/work_groups.css.scss",
		"/home/liam/projs/noteworks/app/assets/stylesheets/user.css.scss",
		"/home/liam/projs/noteworks/app/views/work_groups/edit.js.erb",
		"/home/liam/projs/noteworks/app/views/work_groups/new.html.haml",
		"/home/liam/projs/noteworks/app/views/categories/create.js.erb",
		"/home/liam/projs/noteworks/app/views/layouts/application.html.haml",
		"/home/liam/projs/noteworks/app/models/work_group.rb",
		"/home/liam/projs/noteworks/app/assets/stylesheets/style.css.scss",
		"/home/liam/projs/noteworks/app/views/works/data.tsv",
		"/home/liam/projs/noteworks/app/assets/stylesheets/foundation_and_overrides.scss",
		"/home/liam/projs/noteworks/app/views/layouts/application.html.erb",
		"/home/liam/projs/noteworks/Gemfile",
		"/home/liam/projs/noteworks/app/assets/stylesheets/nav.css.scss",
		"/home/liam/projs/noteworks/app/assets/stylesheets/tabs.css.scss",
		"/home/liam/projs/noteworks/app/assets/stylesheets/accordion.css.scss",
		"/home/liam/projs/noteworks/app/assets/javascripts/home.js.coffee",
		"/home/liam/projs/noteworks/config/application.rb",
		"/home/liam/.cache/.fr-P1Oiie/css/foundation.min.css",
		"/home/liam/.cache/.fr-ODzbH0/css/foundation.min.css",
		"/home/liam/projs/noteworks/app/assets/fonts/telegrafico/webfontkit-20140307-185058.zip",
		"/home/liam/projs/noteworks/app/views/works/takenotes.html.erb",
		"/home/liam/projs/noteworks/app/assets/stylesheets/fonts.scss.erb",
		"/home/liam/projs/noteworks/config/environments/production.rb",
		"/home/liam/projs/noteworks/app/assets/stylesheets/fonts.css.erb",
		"/home/liam/projs/noteworks/app/assets/fonts/generator_config.txt",
		"/home/liam/projs/noteworks/config/boot.rb",
		"/home/liam/projs/noteworks/app/assets/fonts/Signika_Negative/OFL.txt",
		"/home/liam/projs/noteworks/app/assets/fonts/telegrafico/telegrafico-webfont.ttf",
		"/home/liam/projs/noteworks/app/assets/fonts/telegrafico/stylesheet.css",
		"/home/liam/projs/noteworks/app/views/layouts/_nav.html.haml",
		"/home/liam/projs/noteworks/app/controllers/home_controller.rb",
		"/home/liam/projs/noteworks/app/views/categories/update.js.erb",
		"/home/liam/projs/noteworks/app/assets/stylesheets/scaffolds.css.scss",
		"/home/liam/projs/noteworks/app/views/categories/index.html.haml",
		"/home/liam/projs/noteworks/app/assets/stylesheets/foundation_mixins_only.css.scss",
		"/home/liam/projs/noteworks/app/views/categories/new.html.haml",
		"/home/liam/projs/noteworks/app/controllers/nodes_controller.rb",
		"/home/liam/projs/noteworks/Gemfile.lock",
		"/home/liam/projs/noteworks/app/models/comparison_node.rb",
		"/home/liam/projs/noteworks/app/views/categories/edit.html.haml",
		"/home/liam/projs/noteworks/app/views/categories/destroy.js.erb",
		"/home/liam/projs/noteworks/app/views/nodes/edit.html.erb",
		"/home/liam/projs/noteworks/app/assets/images/ajax-loader.gif",
		"/home/liam/projs/noteworks/app/views/nodes/_form.html.erb",
		"/home/liam/projs/noteworks/app/views/categories/index.html.erb",
		"/home/liam/projs/noteworks/app/models/place_holder.rb",
		"/home/liam/projs/noteworks/app/views/works/_link.rabl",
		"/home/liam/projs/noteworks/app/models/link.rb",
		"/home/liam/projs/noteworks/app/views/links/show.json.rabl",
		"/home/liam/projs/noteworks/app/views/works/_nodedisplay.html.haml",
		"/home/liam/projs/noteworks/app/views/categories/show.html.haml",
		"/home/liam/projs/noteworks/app/views/works/_form.html.erb",
		"/home/liam/projs/noteworks/app/views/works/_old_terminal.html.erb",
		"/home/liam/projs/noteworks/app/views/works/_nodedisplay.html.erb",
		"/home/liam/projs/noteworks/app/views/works/show.json.jbuilder",
		"/home/liam/projs/noteworks/app/views/works/_terminal.html.erb",
		"/home/liam/projs/noteworks/app/views/works/miserables.json",
		"/home/liam/projs/noteworks/app/views/nodes/index.html.erb",
		"/home/liam/projs/noteworks/README.md",
		"/home/liam/projs/noteworks/b_remove_element.txt",
		"/home/liam/projs/noteworks/vendor/b_remove_element.txt"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"'], ",
			"body",
			"scal",
			"light",
			"$primary-color",
			"link",
			"hover",
			"buttons",
			"button",
			"font-family",
			"moon",
			"public",
			"@group",
			"\"]}, ",
			", ",
			"font-weight",
			"button",
			"font-family",
			"top",
			"}}\n",
			"drawText",
			"liam",
			"note",
			"binding.pry",
			"true",
			"\n//= require_tree .",
			"line-height",
			"button",
			"$include-html-classes",
			"top",
			"nav",
			"header",
			"Anonymous-webfont",
			"anonymous/",
			"header",
			"\n//",
			"body",
			"font",
			"<aside ",
			"<a ",
			"class=\"",
			"<div class=\"",
			"#222",
			"button",
			"signikanegative-regular",
			"Signika_Negative",
			"getNum",
			"button",
			"signikanegative-webfont",
			"telegrafico",
			"proximanova-regular",
			"font-url",
			"telegrafico",
			"url",
			"icomoon",
			"width",
			"rem-calc",
			"split",
			"gutter",
			"button",
			"html",
			"grid",
			"border",
			"button",
			"border",
			"button",
			"true",
			"include-html-classes",
			"categories_path",
			"nodes",
			"text",
			"nodes",
			"    \n",
			"getLineText",
			"getLine",
			"\"null\"",
			"\"PlaceHolder\"",
			"child",
			"map",
			"map!",
			"en",
			"div",
			"binding.pry",
			"addElem",
			"updateElement",
			"markup",
			"o.",
			"o ",
			"changed",
			"  \n",
			"num_lines_changed",
			"num_lines",
			"build_node",
			"			",
			"get_element_in",
			"line_content",
			"text",
			"build_node",
			"binding.pry",
			"\"note\"",
			"\"node\"",
			"lcoll",
			"\"lcoll\"",
			"lcoll",
			"markup",
			"binding.pry",
			"add_edge",
			"removed",
			"bindin",
			")\n",
			"line_number",
			"line_content",
			"getTextFromRegexp",
			"binding.pry",
			"<",
			"name",
			"binding",
			"el",
			"insert_ele",
			"get_ordering",
			"populate_",
			".links.eac",
			"new_parent_id",
			"change_",
			"owner_id",
			"format_hash",
			"getElementInOrdering",
			"printOrdering"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"group",
			"franchise-bold-webfont",
			"Franchise Bold/",
			"%a",
			".",
			"$terminal-background-color",
			"Anonymous",
			"anonymous",
			"signikanegative-regular-webfont",
			"Signika_Negative",
			"signikanegative",
			"telegrafico",
			"asset_url",
			"asset-url",
			"url(font-path",
			"signikanegative-regular-webfont",
			"signikanegative-regular-webfont.eot",
			"font-url",
			"telegrafico",
			"categories",
			"#binding.pry",
			"modElement",
			"new_ordering.",
			"new_ordering",
			"\"Note\"",
			"\"Node\"",
			"\"LinkCollection\"",
			"number",
			"content",
			"get_text_from_regexp",
			"get_element_in_ordering",
			"print_ordering",
			"set_order",
			"format_hash_for_AJAX",
			"get_markup_lines",
			"set_markup",
			"change_parent",
			"find_element_children",
			"find_element_parent",
			"remove_element",
			"modify_element",
			"parse_text",
			"build_node",
			"build_note",
			"populate_ordering",
			"get_ordering",
			"to_cytoscape_hash",
			"add_new_element",
			"delete_element",
			"insert_element",
			"mod",
			"modify",
			"mod",
			"modify",
			"",
			"add_edges",
			"removeElement",
			"insertElement",
			"self.",
			"Remove",
			"\"",
			"checkLineChanged",
			"getOrdering",
			"populateOrdering",
			"populateOrder",
			"firstChar",
			"stack",
			"#editable",
			"targ1",
			"targ",
			"//",
			"#",
			"defaualt",
			"datum",
			"$tff-white",
			"$tff-black",
			"tff-red",
			"tff-white",
			"primaryAward",
			"id",
			"value",
			"Link",
			"work",
			"passiveNavColor",
			"(activeNavColor)",
			"(navColor)",
			"activeNavColor",
			"navColor",
			"button",
			"#2C304D",
			"#1C206D",
			"#1C209D",
			"#1C202D",
			"#0D528A",
			"greater_headings",
			"."
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/assets/stylesheets/foundation_and_overrides.css.scss",
					"settings":
					{
						"buffer_size": 42196,
						"regions":
						{
						},
						"selection":
						[
							[
								39256,
								39256
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Sass/Syntaxes/Sass.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 25647.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/views/users/show.html.haml",
					"settings":
					{
						"buffer_size": 264,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Rails/Ruby Haml.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "config/initializers/devise.rb",
					"settings":
					{
						"buffer_size": 12448,
						"regions":
						{
						},
						"selection":
						[
							[
								10272,
								10272
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3941.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app/views/users/sessions/new.html.haml",
					"settings":
					{
						"buffer_size": 401,
						"regions":
						{
						},
						"selection":
						[
							[
								371,
								371
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Rails/Ruby Haml.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "app/views/users/shared/_links.haml",
					"settings":
					{
						"buffer_size": 1213,
						"regions":
						{
						},
						"selection":
						[
							[
								29,
								29
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Rails/Ruby Haml.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "app/views/works/_work_list.html.haml",
					"settings":
					{
						"buffer_size": 1446,
						"regions":
						{
						},
						"selection":
						[
							[
								1444,
								1444
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Rails/Ruby Haml.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "app/assets/stylesheets/works.css.scss",
					"settings":
					{
						"buffer_size": 2113,
						"regions":
						{
						},
						"selection":
						[
							[
								1736,
								1736
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Sass/Syntaxes/Sass.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1386.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "app/assets/stylesheets/users.css.scss",
					"settings":
					{
						"buffer_size": 335,
						"regions":
						{
						},
						"selection":
						[
							[
								288,
								288
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Sass/Syntaxes/Sass.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "app/assets/javascripts/works.js",
					"settings":
					{
						"buffer_size": 31381,
						"regions":
						{
						},
						"selection":
						[
							[
								2750,
								2750
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2767.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "app/views/work_groups/_work_group_list.html.haml",
					"settings":
					{
						"buffer_size": 1121,
						"regions":
						{
						},
						"selection":
						[
							[
								653,
								653
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/Rails/Ruby Haml.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 41.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 124.0
	},
	"output.gjslint_result_view":
	{
		"height": 148.0
	},
	"output.sftp":
	{
		"height": 235.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 280.0,
	"status_bar_visible": true
}
